{"version":3,"sources":["components/BallotListItem.js","components/BallotList.js","components/WinnerModal.js","App.js","serviceWorker.js","index.js","raffle.svg"],"names":["BallotListItem","react_default","a","createElement","className","this","props","data","Component","BallotList","header","ballot","map","el","components_BallotListItem","key","WinnerModal","winner","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","generaNumeros","limite","i","numero","toString","push","handleChange","event","setState","target","value","initBallot","state","resetBallot","preventDefault","losers","handleButtonClick","newLosers","newBallot","newLoser","splice","Math","floor","random","length","components_BallotList","components_WinnerModal","src","logo","alt","onClick","href","rel","type","min","step","defaultValue","onChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7339e1b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass BallotListItem extends Component{\n\trender () {\n\t\treturn (\n\t\t\t<tr>\n\t\t\t\t<td><span className=\"pelota\">{this.props.data}</span></td>\n\t\t\t</tr>\n\t\t)\n\t}\n\n}\n\nexport default BallotListItem;","import React, { Component } from 'react';\nimport BallotListItem from './BallotListItem';\n\nclass BallotList extends Component{\n\n\trender () {\n\t\treturn (\n\t\t\t<table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>{this.props.header}</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{this.props.ballot.map( (el) => { return <BallotListItem data={el} key={el}/> })}\n\t\t\t\t</tbody>\n\t\t\t</table>\n\t\t\t);\n\t}\n}\n\nexport default BallotList;","import React, { Component } from 'react';\n\nclass WinnerModal extends Component{\n\trender () {\n\t\treturn (\n\t\t\t<div className=\"modal\" >\n\t\t\t\t<h3>¡Felicidades al ganador!</h3>\n\t\t\t\t<span className=\"pelota\">{this.props.winner}</span>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default WinnerModal;","import React, { Component } from 'react';\nimport BallotList from './components/BallotList'\nimport WinnerModal from './components/WinnerModal'\nimport logo from './raffle.svg';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      ballot:[],\n      losers: [],\n      winner: 0,\n      limite: 10,\n    }\n  }\n\n  componentWillMount(){\n    this.initBallot();\n  }\n\n  //Cuando solo queda un número en el arreglo, se le considera ganador \n  //y se vacía la lista para evitar un loop infinito.\n\n  componentDidUpdate(){\n    if (this.state.ballot.length === 1){\n      const winner = this.state.ballot[0];\n      this.setState( state => {\n        return {\n          ballot : [],\n          winner : winner,\n        }\n      });\n    }\n  }\n\n  generaNumeros = (limite) => {\n    let ballot = [];\n    let i = 1;\n\n    for(i; i <= limite; i++){\n      let numero = null\n      if(i < 10){\n        numero = \"0\" + i.toString();\n      }\n      else {\n        numero = i.toString();\n      }\n\n      ballot.push(numero);\n    }\n\n    return ballot;\n  }\n\n  handleChange = (event) => {\n    this.setState({limite: event.target.value});\n  }\n\n  initBallot = () => {\n    const ballot = this.generaNumeros(this.state.limite);\n    this.setState( state => {\n      return {ballot: ballot}\n    })\n  }\n\n  resetBallot = (event) => {\n    event.preventDefault();\n    this.setState( state => {\n      return {\n        ballot : [\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\"],\n        losers : [],\n        winner : 0\n      }\n    });\n  }\n\n  //Esta sintaxis permite conversar la referencia this.\n  handleButtonClick = () =>{\n\n\n    /*Si aún no hay ganador, se sacan números del arreglo \n    y se pasan al de perdedores que se muestra del lado derecho en la vista. */\n\n    if (this.state.winner === 0){\n      const newLosers = this.state.losers;\n      const newBallot = this.state.ballot;\n      const newLoser = newBallot.splice(Math.floor(Math.random()*newBallot.length), 1);\n\n      newLosers.push(newLoser[0]);\n\n      this.setState({ballot: newBallot});\n      this.setState({losers: newLosers});\n    }\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n      <div className=\"row\">\n\n    {/*Componente para mostrar números que aun tienen una oportunidad */}\n      <div className=\"col lista\">\n          <BallotList ballot={this.state.ballot} header=\"Aún con vida...\" />\n      </div>\n\n\n\n      <div className=\"col\">\n        <header className=\"App-header\">\n\n      {/* Mientras no se tenga un ganador, se mostrará el ícono para sacar números, \n      en caso contrario, se llama al componente que felicita*/}\n\n          {this.state.winner > 0 ? <WinnerModal winner={this.state.winner} /> : \n            <div>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" onClick={this.handleButtonClick}/>\n              <p>\n                Haga click en la <a href=\"https://www.onlinewebfonts.com/icon/562679\" rel=\"noopener noreferrer\" target=\"_blank\">\n                tómbola</a> para sacar números\n              </p>\n            </div>\n          }\n\n\n      {/* El botón de reinicio se renderiza hasta que haya comenzado el sorteo. */}\n\n   \n          { \n\n            this.state.losers.length > 0 ? \n            <button\n              onClick={this.resetBallot}\n            >\n              Reiniciar\n            </button> \n\n      :       \n\n      <div>Limite: &nbsp;&nbsp;&nbsp;\n      <input type=\"number\" min=\"10\" step=\"1\" defaultValue=\"10\" onChange={this.handleChange}/>\n      <button onClick={this.initBallot}>Generar</button></div> \n\n    }\n          \n        </header>\n        </div>\n\n\n        {/*Componente para mostrar números descartados*/}\n        <div className=\"col lista\">\n          <BallotList ballot={this.state.losers} header=\"Descartados:\" />        \n        </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/raffle.bbb62caf.svg\";"],"sourceRoot":""}